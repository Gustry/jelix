<?php
/**
 * @author      Laurent Jouanneau
 * @copyright   2009-2018 Laurent Jouanneau
 *
 * @see        http://jelix.org
 * @licence     GNU Lesser General Public Licence see LICENCE file or http://www.gnu.org/licenses/lgpl.html
 */

namespace Jelix\Installer;

use Jelix\IniFile\IniModifierInterface;

/**
 * container for module properties, according to a specific entry point configuration.
 */
class ModuleStatus
{
    /**
     * @var string
     */
    public $name;

    /**
     * indicate if the module is enabled into the application or not.
     *
     * @var bool
     */
    public $isEnabled = false;
    /**
     * @var string
     */
    public $dbProfile;

    /**
     * indicate if the module is marked as installed.
     *
     * @var bool true/false or 0/1
     */
    public $isInstalled = false;

    /**
     * The version of the module that has been installed.
     *
     * @var string
     */
    public $version;

    /**
     * @var string[] parameters for installation
     */
    public $parameters = array();

    public $skipInstaller = false;

    /**
     * the module is configured for any instance.
     */
    const CONFIG_SCOPE_APP = 0;

    /**
     * the module is configured only at the instance level
     * (installed by the user, not by the developer).
     */
    const CONFIG_SCOPE_LOCAL = 1;

    /**
     * indicate if the module is configured into the app, or only for
     * the instance, so only into local configuration.
     *
     * @var int one of CONFIG_SCOPE_* constants
     */
    public $configurationScope = 0;

    protected $path;

    /**
     * @param string $name   the name of the module
     * @param string $path   the path to the module
     * @param array  $config configuration of modules ([modules] section),
     *                       generated by the configuration compiler for a specific
     *                       entry point
     */
    public function __construct($name, $path, $config)
    {
        $this->name = $name;
        $this->path = $path;
        $this->isEnabled = $config[$name.'.enabled'];
        $this->dbProfile = $config[$name.'.dbprofile'];
        $this->isInstalled = $config[$name.'.installed'];
        $this->version = $config[$name.'.version'];

        if (isset($config[$name.'.installparam'])) {
            $this->parameters = self::unserializeParameters($config[$name.'.installparam']);
        }

        if (isset($config[$name.'.skipinstaller']) && $config[$name.'.skipinstaller'] == 'skip') {
            $this->skipInstaller = true;
        }

        if (isset($config[$name.'.localconf'])) {
            $this->configurationScope = ($config[$name.'.localconf'] ? self::CONFIG_SCOPE_LOCAL : self::CONFIG_SCOPE_APP);
        }
    }

    public function getPath()
    {
        return $this->path;
    }

    public function getName()
    {
        return $this->name;
    }

    public function saveInfos(IniModifierInterface $configIni, $defaultParameters = array())
    {
        $previous = $configIni->getValue($this->name.'.enabled', 'modules');
        if ($previous === null || $previous != $this->isEnabled) {
            $configIni->setValue($this->name.'.enabled', $this->isEnabled, 'modules');
        }

        $this->setConfigInfo($configIni, 'dbprofile', ($this->dbProfile != 'default' ? $this->dbProfile : ''), '');
        $this->setConfigInfo($configIni, 'installparam', self::serializeParameters($this->parameters, $defaultParameters), '');
        $this->setConfigInfo($configIni, 'skipinstaller', ($this->skipInstaller ? 'skip' : ''), '');
        $this->setConfigInfo(
            $configIni,
            'localconf',
            ($this->configurationScope == self::CONFIG_SCOPE_LOCAL ? self::CONFIG_SCOPE_LOCAL : 0),
            self::CONFIG_SCOPE_APP
        );
    }

    /**
     * @param IniModifierInterface $configIni
     * @param string               $name
     * @param mixed                $value
     * @param mixed                $defaultValue
     */
    private function setConfigInfo($configIni, $name, $value, $defaultValue)
    {
        // only modify the file when the value is not already set
        // to avoid to have to save the ini file  #perfs
        $previous = $configIni->getValue($this->name.'.'.$name, 'modules');
        if ($value !== $defaultValue) {
            if ($previous != $value) {
                $configIni->setValue($this->name.'.'.$name, $value, 'modules');
            }
        } elseif ($previous !== null) {
            // if the value is the default one, and there was a previous value
            // be sure to remove the key from the configuration file to
            // slim the configuration file
            $configIni->removeValue($this->name.'.'.$name, 'modules');
        }
    }

    public function clearInfos(IniModifierInterface $configIni)
    {
        foreach (array('enabled', 'dbprofile', 'installparam',
            'skipinstaller', 'localconf', ) as $param) {
            $configIni->removeValue($this->name.'.'.$param, 'modules');
        }
    }

    public static function unserializeParameters($parameters)
    {
        $trueParams = array();
        $parameters = trim($parameters);
        if ($parameters == '') {
            return $trueParams;
        }
        $params = explode(';', $parameters);
        foreach ($params as $param) {
            $kp = explode('=', $param);
            if (count($kp) > 1) {
                $v = $kp[1];
                if (strpos($v, ',') !== false) {
                    $trueParams[$kp[0]] = explode(',', $v);
                } elseif ($v === 'false') {
                    $trueParams[$kp[0]] = false;
                } elseif ($v === 'true') {
                    $trueParams[$kp[0]] = true;
                } else {
                    $trueParams[$kp[0]] = $v;
                }
            } else {
                $trueParams[$kp[0]] = true;
            }
        }

        return $trueParams;
    }

    public function getSerializedParameters()
    {
        return self::unserializeParameters($this->parameters);
    }

    public static function serializeParameters($parameters, $defaultParameters = array())
    {
        $p = array();
        foreach ($parameters as $name => $v) {
            if (is_array($v)) {
                if (!count($v)) {
                    continue;
                }
                $v = implode(',', $v);
            }
            if (isset($defaultParameters[$name]) && $defaultParameters[$name] === $v) {
                // don't write values that are default ones
                continue;
            }
            if ($v === true) {
                $p[] = $name;
            } elseif ($v === false) {
                $p[] = $name.'=false';
            } else {
                $p[] = $name.'='.$v;
            }
        }

        return implode(';', $p);
    }
}
